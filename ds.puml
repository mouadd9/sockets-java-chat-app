@startuml
box "Client Émetteur" #F0B27A
participant ChatController as SenderController
participant ChatService as SenderService
participant JsonLocalMessageRepository as SenderLocalRepo
end box

box "Serveur" #7DCEA0
participant ClientHandler as SenderHandler
participant MessageBroker
end box

box "Client Récepteur" #85C1E9
participant ClientHandler as ReceiverHandler
participant ChatService as ReceiverService
participant ChatController as ReceiverController
participant JsonLocalMessageRepository as ReceiverLocalRepo
end box

box "Persistance" #F7DC6F
participant JsonMessageRepository
participant JsonUserRepository
end box

title Workflow complet d'envoi/réception de messages

SenderController -> SenderService : handleSendMessage(message)
activate SenderService

SenderService -> SenderHandler : envoi du message (JSON via socket)
activate SenderHandler

SenderHandler -> MessageBroker : sendMessage(message)
activate MessageBroker

MessageBroker -> JsonUserRepository : checkQueue(receiverEmail)
activate JsonUserRepository
JsonUserRepository --> MessageBroker : status
deactivate JsonUserRepository

alt Destinataire en ligne
    MessageBroker -> ReceiverHandler : onMessageReceived(message)
    activate ReceiverHandler
    
    ReceiverHandler -> ReceiverService : pushMessage(message)
    activate ReceiverService
    
    ReceiverService -> ReceiverController : handleIncomingMessage()
    activate ReceiverController
    
    ReceiverController -> ReceiverLocalRepo : addLocalMessage()
    activate ReceiverLocalRepo
    ReceiverLocalRepo --> ReceiverController : message ajouté localement
    deactivate ReceiverLocalRepo
    
    ReceiverController -> ReceiverService : acknowledgeMessage(message.id)
    deactivate ReceiverController
    
    ReceiverService -> ReceiverHandler : retour ACK
    deactivate ReceiverService
    
    ReceiverHandler -> MessageBroker : ACK réception
    deactivate ReceiverHandler
    
    MessageBroker -> JsonMessageRepository : updateStatus(DELIVERED)
    activate JsonMessageRepository
    JsonMessageRepository --> MessageBroker : statut mis à jour
    deactivate JsonMessageRepository
else Destinataire hors ligne
    MessageBroker -> JsonMessageRepository : persistMessage(QUEUED)
    activate JsonMessageRepository
    JsonMessageRepository --> MessageBroker : message sauvegardé
    deactivate JsonMessageRepository
end

MessageBroker --> SenderHandler : ACK
deactivate MessageBroker

SenderHandler --> SenderService : ACK du serveur
deactivate SenderHandler

SenderService -> SenderLocalRepo : addLocalMessage()
activate SenderLocalRepo
SenderLocalRepo --> SenderService : message ajouté localement
deactivate SenderLocalRepo

SenderService --> SenderController : mise à jour UI
deactivate SenderService
@enduml